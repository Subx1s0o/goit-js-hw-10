{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n\n  const hours = Math.floor((ms % day) / hour);\n\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconst mainInp = document.querySelector('#datetime-picker');\nconst button = document.querySelector('button[data-start]');\n\nlet userSelectedDate;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: null,\n  minuteIncrement: 1,\n\n  onClose(SelectedDate) {\n    userSelectedDate = SelectedDate[0];\n  },\n};\n\nflatpickr(mainInp, options);\n\nfunction setTimer(userDate) {\n  const isFutureDate =\n    userDate !== undefined && userDate.getTime() >= new Date().getTime();\n\n  if (isFutureDate) {\n    const timer = setInterval(() => {\n      const todayDate = new Date();\n      const timeDiff = Math.max(userDate.getTime() - todayDate.getTime(), 0);\n      const { days, hours, minutes, seconds } = convertMs(timeDiff);\n\n      document.querySelector('span[data-days]').textContent = days\n        .toString()\n        .padStart(2, '0');\n      document.querySelector('span[data-hours]').textContent = hours\n        .toString()\n        .padStart(2, '0');\n      document.querySelector('span[data-minutes]').textContent = minutes\n        .toString()\n        .padStart(2, '0');\n      document.querySelector('span[data-seconds]').textContent = seconds\n        .toString()\n        .padStart(2, '0');\n\n      if (timeDiff === 0) {\n        clearInterval(timer);\n        iziToast.show({\n          title: '✅',\n          message: `Time is left`,\n          messageColor: 'white',\n          backgroundColor: '#57E29A',\n          position: 'topRight',\n        });\n      }\n    }, 1000);\n  } else {\n    iziToast.show({\n      title: '❌',\n      message: `Please choose the date in the future.`,\n      messageColor: 'white',\n      backgroundColor: '#E25757',\n      position: 'topRight',\n    });\n  }\n}\n\nbutton.addEventListener('click', () => {\n  setTimer(userSelectedDate);\n});\n"],"names":["convertMs","ms","days","hours","minutes","seconds","mainInp","button","userSelectedDate","options","SelectedDate","flatpickr","setTimer","userDate","timer","todayDate","timeDiff","iziToast"],"mappings":"2GAKA,SAASA,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,MAAMC,EAAU,SAAS,cAAc,kBAAkB,EACnDC,EAAS,SAAS,cAAc,oBAAoB,EAE1D,IAAIC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,KACb,gBAAiB,EAEjB,QAAQC,EAAc,CACpBF,EAAmBE,EAAa,CAAC,CAClC,CACH,EAEAC,EAAUL,EAASG,CAAO,EAE1B,SAASG,EAASC,EAAU,CAI1B,GAFEA,IAAa,QAAaA,EAAS,QAAS,GAAI,IAAI,KAAI,EAAG,UAE3C,CAChB,MAAMC,EAAQ,YAAY,IAAM,CAC9B,MAAMC,EAAY,IAAI,KAChBC,EAAW,KAAK,IAAIH,EAAS,QAAS,EAAGE,EAAU,UAAW,CAAC,EAC/D,CAAE,KAAAb,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUgB,CAAQ,EAE5D,SAAS,cAAc,iBAAiB,EAAE,YAAcd,EACrD,SAAU,EACV,SAAS,EAAG,GAAG,EAClB,SAAS,cAAc,kBAAkB,EAAE,YAAcC,EACtD,SAAU,EACV,SAAS,EAAG,GAAG,EAClB,SAAS,cAAc,oBAAoB,EAAE,YAAcC,EACxD,SAAU,EACV,SAAS,EAAG,GAAG,EAClB,SAAS,cAAc,oBAAoB,EAAE,YAAcC,EACxD,SAAU,EACV,SAAS,EAAG,GAAG,EAEdW,IAAa,IACf,cAAcF,CAAK,EACnBG,EAAS,KAAK,CACZ,MAAO,IACP,QAAS,eACT,aAAc,QACd,gBAAiB,UACjB,SAAU,UACpB,CAAS,EAEJ,EAAE,GAAI,CACX,MACIA,EAAS,KAAK,CACZ,MAAO,IACP,QAAS,wCACT,aAAc,QACd,gBAAiB,UACjB,SAAU,UAChB,CAAK,CAEL,CAEAV,EAAO,iBAAiB,QAAS,IAAM,CACrCK,EAASJ,CAAgB,CAC3B,CAAC"}